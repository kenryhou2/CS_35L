Henry Kou
204921239
CS35L Lab section 8
Assignment 1

Key.txt for Homework 1

	wget https://web.cs.ucla.edu/classes/fall19/cs35L/assign/assign1.html
	cp assign1.html exer1.html
	cp assign1.html exer2.html	
	cp assign1.html exer3.html

1.1
1	emacs exer1.html
2	C-s HTML
3	C-s scavenger C-s
4	C-s self-referential C-s
5	C-s arrow C-s
6	C-e
7	C-a
8	Yes, the emacs commands as detailed above are useful in navigating through text efficiently
9  	I did not use arrow keys to navigate.
10	C-x C-c

1.2
1	emacs exer2.html
2	M-x goto line RET 18
	(delete comment line)
3	C-s DELETE-ME 
	(delete comment)
4	C-s https://en.wikipedia.org/wiki/HTML_comment#Comments
	(delete comment)
5	C-s  <!--
	(delete comment three times)
	C-x C-c (exit doc)
	diff -u exer1.html exer2.html >exer2.diff
1.3
1	emacs exer3.html
2	C-s Assignment 1
	(Delete Assignment 1, replaced with Assignment 42)
3	C-s UTF-8
	(Replaced with US-ASCII)
4	C-M-s [^[:ascii:]](regex search)
	(Removed Chinese characters/non-ascii)	
5	C-s </ol>
	RET 		(added new line)
6	C-x C-s
	C-x C-c
	diff -u assign1.html exer3.html
1.4
1	cat exer2.html exer2.diff >exer4.html
2	emacs exer4.html
3	(Copy each diff line back to its original place in the top of the file.)
	(Navigate to desired line)
	C-@ (mark)
	Select what you want to copy'
	M-w (copy)
	M-x goto line [desired line] RET (line where you want to paste)
	C-y (yank)
4	(repeat procedure for rest of the desired lines)
5	C-@ (mark)  
	(select what you want to kill)
	C-w (kill entire region, which is the bottom diff comments)
6	C-x u (undo)
7	(navigate to the beginning of the diff section of the file)
	<!--
	(delete remaining -->)
	(at bottom of the file, place the end comment)
	-->
8	M-x replace-string 
	<ol>	(old string)
	<oL> 	(new string)
9	C-x C-c
	diff -u exer1.html exer4.html >exer4.diff
	(also checked exer4.html in the web browser)

1.5
	mkdir ~/junk
	cd ~/junk
	emacs hello.c
	(paste code)
	M-!			(bring up emacs cmd line)
	M-x compile
	gcc hello.c –o hello
	./hello
	C-x b 			(to navigate to the *Shell Command Output* buffer)
	C-@ 			(highlight to select the ./hello program output)
	M-w 			(copy)
	C-x b hello-out 	(create a hello-out buffer)
	C-y 			(paste contents of ./hello output to the hello-out buffer)
	EOF on input 		(hello-out buffer content)

1.6
1	emacs hello.c
	C-x b 			(to navigate to the *scratch* buffer)
2	random "204-921-239"
	C-j
	"204-921-239"		(result)
3	setq x (random)		(set x to a random variable with your seed)
	C-j
	87582156050002837	(result)
	setq y (random)		(set x to a random variable with your seed)
	C-j
	-784140579002522277	(result)
	(* 87582156050002837 -784140579002522277)
	C-j
4	1957592249738649335	(result) Incorrect answer
5	M-: (* 87582156050002837 -784140579002522277)
	1957592249738649335 (#o154526074360456557367, #x1b2ac3c784badef7)
6	The two variables x y generated at "random" are not truly random because the function is being run
	on a deterministic computer program which cannot generate true random numbers. Therefore these variables
	x and y are pseudo-random numbers generated deterministically. They are similar to random, but generated from a seed.
7	The integers in lisp programming on Emacs is represented with a 30 bit integer. List arithmetic operations also do not check for
	integer over flow, therefore is our source of error. The total possible number of outcomes for the product of 2 30 bit integers
	is 2^60 total possible combinations. Therefore, our probability of error comes from the number of possibilities of the product of the two 
	30 bit integers being strictly less than -536870912 or strictly greater than 536870911 divided by the total number of outcomes.
	This can be shown in a formula as 

	x_prod = product of x and y where each variable is a 30 bit int.
	P(error) = (P(x_prod < -536870912) U P(x_prod > 536870911))/(2^60). 
	The probability of overflow can be represented by P(x_prod < -536870912) U P(x_prod > 536870911), 
	where P(x_prod < -536870912) = 4e10 and P(x_prod > 536870911) also is 4e10.
	Therefore P(error) = 13.87%
	



	

	